name: Build

on: workflow_dispatch

env:
  QT_VERSION: 6.6.3
  QT_MODULES: qtmultimedia qtimageformats qtnetworkauth qtshadertools
  IS_RELEASE: ${{ startsWith(github.ref, 'refs/tags/v') }}
  IS_NIGHTLY: ${{ !startsWith(github.ref, 'refs/tags/v') }}
  CMAKE_BUILD_PARALLEL_LEVEL: 2
  QSCINTILLA_VERSION: 2.14.1
  QSCINTILLA_DIR: QScintilla_src-2.14.1
  ANDROID_NDK_VERSION: 25.1.8937393

jobs:
  # Gatekeeper job to skip build for Crowdin PRs
  gatekeeper:
    name: Gatekeeper
    if: startsWith(github.head_ref, 'crowdin') == false
    runs-on: ubuntu-latest
    steps:
      - run: echo "OK"

  version:
    name: Version
    runs-on: ubuntu-latest
    needs: gatekeeper

    outputs:
      version: ${{ steps.get-version.outputs.version }}
      release: ${{ steps.get-version.outputs.release }}
      nightly: ${{ steps.get-version.outputs.nightly }}

    steps:
      - name: Get version
        id: get-version
        run: |
          if [[ "$IS_RELEASE" == 'true' ]]; then echo "version=${GITHUB_REF##*/}" >> $GITHUB_OUTPUT ; fi
          if [[ "$IS_RELEASE" != 'true' ]]; then echo "version=nightly" >> $GITHUB_OUTPUT ; fi
          echo "release=$([ "$IS_RELEASE" = "true" ] && echo "1" || echo "0")" >> $GITHUB_OUTPUT
          echo "nightly=$([ "$IS_NIGHTLY" = "true" ] && echo "1" || echo "0")" >> $GITHUB_OUTPUT

  linux:
    name: Linux
    runs-on: ubuntu-22.04-arm
    needs: version

    env:
      GRABBER_VERSION: ${{ needs.version.outputs.version }}
      GRABBER_IS_NIGHTLY: ${{ needs.version.outputs.nightly }}
      LINUXDEPLOYQT_VERSION: continuous

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install libpulse-dev libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-render-util0 libxcb-xinerama0 libxcb-cursor0 libxkbcommon-x11-0 libgstreamer-plugins-base1.0-0 zsync xvfb

      - name: Install Qt
        uses: jdpurcell/install-qt-action@v5
        with:
          cache: true
          version: ${{ env.QT_VERSION }}
          modules: ${{ env.QT_MODULES }}
          host: 'linux_arm64'
          target: 'desktop'
          arch: 'linux_gcc_arm64'

      - name: Vendor cache
        uses: actions/cache@v4
        id: vendor-cache
        with:
          path: vendor
          key: ${{ runner.os }}-vendor-${{ hashFiles('.github/workflows/build.yml') }}

      - name: Create vendor dir
        if: steps.vendor-cache.outputs.cache-hit != 'true'
        run: mkdir vendor

      - name: Build QScintilla
        if: steps.vendor-cache.outputs.cache-hit != 'true'
        working-directory: vendor
        run: |
          curl -Lo "QScintilla.zip" "https://www.riverbankcomputing.com/static/Downloads/QScintilla/${QSCINTILLA_VERSION}/QScintilla_src-${QSCINTILLA_VERSION}.zip"
          7z x "QScintilla.zip" -y
          rm "QScintilla.zip"
          cd "${QSCINTILLA_DIR}/src"
          qmake qscintilla.pro
          make

      - name: Install QScintilla
        working-directory: vendor
        run: |
          cd "${QSCINTILLA_DIR}/src"
          make install

      - name: Download linuxdeployqt
        if: steps.vendor-cache.outputs.cache-hit != 'true'
        working-directory: vendor
        run: |
          curl -Lo "linuxdeployqt.AppImage" "https://github.com/probonopd/linuxdeployqt/releases/download/${LINUXDEPLOYQT_VERSION}/linuxdeployqt-${LINUXDEPLOYQT_VERSION}-arm64.AppImage"
          chmod a+x linuxdeployqt.AppImage

      # This driver causes an issue in linuxdeployqt because Mimer SQL is not installed but the plugin depends on it
      - name: Delete unnecessary SQL driver
        run: |
          rm $Qt6_DIR/plugins/sqldrivers/libqsqlmimer.so
          rm $Qt6_DIR/lib/cmake/Qt6Sql/Qt6QMimerSQLDriverPlugin*.cmake

      - name: Build
        run: |
          mkdir build
          cd build
          cmake ../src -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr -DNIGHTLY=$GRABBER_IS_NIGHTLY -DCOMMIT="$GITHUB_SHA" -DVERSION="$GRABBER_VERSION"
          cmake --build . --config Release --target sites
          cmake --build . --config Release

      - name: Test
        working-directory: src/lib
        run: |
          QT_QPA_PLATFORM=offscreen ../../build/lib/tests/lib-tests
          QT_QPA_PLATFORM=offscreen ../../build/cli/tests/cli-tests

      - name: Test GUI
        working-directory: src/lib
        run: |
          QT_QPA_PLATFORM=offscreen ../../build/gui/tests/gui-tests
          QT_QPA_PLATFORM=offscreen ../../build/crash-reporter/tests/crash-reporter-tests

      - name: Generate AppImage
        run: |
          ./scripts/package-appimage.sh
          mv Grabber_*-arm64.AppImage Grabber-arm64.AppImage
          mv Grabber_*-arm64.AppImage.zsync Grabber-arm64.AppImage.zsync

      - name: Upload AppImage
        uses: actions/upload-artifact@v4
        with:
          name: Grabber-arm64.AppImage
          path: Grabber-arm64.AppImage
          if-no-files-found: error

      - name: Upload AppImage update information
        uses: actions/upload-artifact@v4
        with:
          name: Grabber-arm64.AppImage.zsync
          path: Grabber-arm64.AppImage.zsync
          if-no-files-found: error

      - name: Generate archive
        run: ./scripts/package-linux.sh

      - name: Upload archive
        uses: actions/upload-artifact@v4
        with:
          name: Grabber.tar.gz
          path: Grabber.tar.gz
          if-no-files-found: error

  github:
    name: Upload to GitHub releases
    runs-on: ubuntu-latest
    needs: [version, linux]

    if: github.repository == 'Bionus/imgbrd-grabber' && github.event_name == 'push' && (needs.version.outputs.release == '1' || github.ref == 'refs/heads/develop')

    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      VERSION: ${{ needs.version.outputs.version }}

    steps:
      - name: Download artifact (Linux AppImage)
        uses: actions/download-artifact@v4
        with:
          name: Grabber-arm64.AppImage

      - name: Download artifact (Linux AppImage update information)
        uses: actions/download-artifact@v4
        with:
          name: Grabber-arm64.AppImage.zsync

      - name: Download artifact (Linux archive)
        uses: actions/download-artifact@v4
        with:
          name: Grabber.tar.gz

      - name: Download artifact (macOS)
        uses: actions/download-artifact@v4
        with:
          name: Grabber.dmg

      - name: Download artifact (Windows 64-bit installer)
        uses: actions/download-artifact@v4
        with:
          name: Grabber_x64.exe

      - name: Download artifact (Windows 64-bit archive)
        uses: actions/download-artifact@v4
        with:
          name: Grabber_x64.zip

      - name: Download artifact (Windows 64-bit symbols)
        uses: actions/download-artifact@v4
        if: needs.version.outputs.release == '1'
        with:
          name: Grabber_x64_symbols.zip

      - name: Download artifact (Android)
        uses: actions/download-artifact@v4
        with:
          name: Grabber.apk

      - name: Rename artifacts
        run: |
          mv Grabber-arm64.AppImage Grabber_${VERSION}-arm64.AppImage
          mv Grabber-arm64.AppImage.zsync Grabber_${VERSION}-arm64.AppImage.zsync
          mv Grabber.tar.gz Grabber_${VERSION}.tar.gz

      - name: Rename symbols artifacts
        if: needs.version.outputs.release == '1'
        run: |
          mv Grabber_x64_symbols.zip Grabber_${VERSION}_x64_symbols.zip

      - name: Get date for Nightly body
        id: date
        if: needs.version.outputs.nightly == '1'
        run: echo "date=$(date +'%Y-%m-%d %H:%M:%S %Z')" >> $GITHUB_OUTPUT

      - name: Nightly
        uses: ncipollo/release-action@v1
        if: needs.version.outputs.nightly == '1'
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: nightly
          name: Nightly
          allowUpdates: true
          draft: false
          prerelease: true
          artifacts: Grabber_*
          body: |
            Nightly automated builds from the develop branch.
            Automatically uploaded by GitHub actions, **use at your own risk**!

            **Head:** ${{ github.sha }}
            **Date:** ${{ steps.date.outputs.date }}

      - name: Release
        uses: ncipollo/release-action@v1
        if: needs.version.outputs.release == '1'
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          allowUpdates: true
          draft: true
          artifacts: Grabber_*